{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","userFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAkB5C,OACE,sBAAMC,SAXS,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAhBpB,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCNfG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAKA,EAAL,WCHCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECCZ,SAAEA,GAAe,IAAD,EAEfd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ4B,mBAElCC,EAFkC,KAE3BC,EAF2B,KAmBzC,OAZAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GACCH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAI1B,CAACpB,IAEGqB,EDlByBK,CAAe1B,GAAlCa,EAFwB,EAE9BN,KAAca,EAFgB,EAEhBA,QAGrB,OACI,qCACI,mCAAMpB,EAAN,OAECoB,GAAW,mBAAGJ,UAAU,wCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SACKH,EAAOJ,KAAK,SAAAC,GAAG,OACZ,aADkB,CACjB,EAAD,eAEQA,GADCA,EAAIC,aEdpBgB,EAAe,WAAO,IAAD,EAEMzC,mBAAS,CAAC,mBAFhB,mBAEvB0C,EAFuB,KAEX3C,EAFW,KAS9B,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEG2C,EAAWnB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCjBrB6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.02c4363a.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\nconst [inputValue, setInputValue] = useState('');\n\nconst handleInputChange = (e) => {\n    setInputValue( e.target.value );\n}\n\nconst handleSubmit = (e) => {\n    e.preventDefault(); // evita el comportamiento de recargar el navegador en un form al presionar submit\n\n    if (inputValue.trim().length > 2) {\n        setCategories( cats => [inputValue, ...cats]);\n        setInputValue('');\n    }\n    \n}\n\n    return (\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n      </form>\n    );\n}\n\n\n// <> fragment utilizado para agrupar elementos html\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=UWWjJ2nZ9AE9jOc6eTPW5O67fEEvq5uN`\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( {title, url} ) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p> {title} </p>\n        </div>\n    )\n}\n\n","import React from 'react'\nimport { userFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const {data: images, loading} = userFetchGifs( category );\n\n\n    return (\n        <>\n            <h3> {category} </h3>\n\n            {loading && <p className=\"card animate__animated animate__flash\">loading</p>}\n\n            <div className=\"card-grid\">\n                {images.map( img => ( // al colocar parentesis, hacemos un return implicito\n                    <GifGridItem \n                        key={img.id} \n                        {...img}\n                    />\n                ))}\n            </div>\n        </>\n        \n    )\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const userFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => { // los efectos son sincronos, no pueden ser async\n\n        getGifs( category )\n            .then( imgs => {\n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n            } )\n\n    }, [category]) // el efecto va a cambiar cuando cambie la cateogira\n\n    return state; // { data: [], loading: true };\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['SuperCampeones'])\n\n    // const handleAdd = () => {\n    //     //setCategories( [...categories, 'Arnold'] );\n    //     setCategories( cats => [...cats, 'Arnold']);\n    // }\n\n    return (\n      <>\n        <h2>GifExpertApp</h2>\n        <AddCategory setCategories={setCategories} />\n        <hr />\n\n        <ol> \n            \n          {categories.map((category) => (\n            <GifGrid\n                key={category} \n                category={category} \n            />\n          ))}\n        </ol>\n      </>\n    );\n    // un map siempre recibe dos argumentos por defecto, el elemento del arreglo y el indice\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.scss';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}